import React, { useState, useEffect, useRef } from 'react';
import { StyleSheet, Text, Button, View, PermissionsAndroid} from 'react-native';
import Geolocation from '@react-native-community/geolocation';

// –°–æ—Å—Ç–æ—è–Ω–∏—è
const STATE_CALCULATE_LOCATION = 0; // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
const STATE_LOADING_DATA       = 1; // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
const STATE_DATA_LOADED        = 2; // –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
const STATE_DATA_ERROR         = 3; // –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö

function App() {
  const [updatingDone, setUpdatingState] = useState(STATE_CALCULATE_LOCATION);
  const currTemp = useRef(undefined);
  const [feelsLike, setFeelLike] = useState(undefined);
  const [minTemp, setMinTemp] = useState(undefined);
  const [maxTemp, setMaxTemp] = useState(undefined);
  const [pressure, setPressure] = useState(undefined);
  const [humidity, setHumidity] = useState(undefined);
  const [seaLevel, setSeaLevel] = useState(undefined);
  const [groundLevel, setGroundLevel] = useState(undefined);
  
  const location:any = useRef(undefined);

  interface FetchOptions extends RequestInit{
    timeout?: number;
  }

  async function requestLocationPermission() 
  {
    try {
      const granted = await PermissionsAndroid.request(PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION,
        {
          title: '–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–≤ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è',
          message: '–í—ã —Ä–∞–∑—Ä–µ—à–∞–µ—Ç–µ –¥–∞–Ω–Ω–æ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ?',
          buttonNeutral: '–°–ø—Ä–æ—Å–∏—Ç—å –ø–æ–∑–∂–µ',
          buttonNegative: '–ó–∞–ø—Ä–µ—Ç–∏—Ç—å',
          buttonPositive: '–†–∞–∑—Ä–µ—à–∏—Ç—å'
        },
      );
        if (granted === PermissionsAndroid.RESULTS.GRANTED)
        {
          console.log('–ü—Ä–∞–≤–∞ –ø–æ–ª—É—á–µ–Ω—ã');
          return true;
        }
        else {
          console.log('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω')
          return false;
        }
      } catch (error) {return false}
  }

  function getLocation(){
    requestLocationPermission().then((res) => 
      {
      console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç', res);
      if (res)
      {
        Geolocation.getCurrentPosition((position) => {
            location.current = position;          
            console.log('–¥–æ–ª–≥–æ—Ç–∞', location.current.coords.longitude)
            console.log('—à–∏—Ä–æ—Ç–∞', location.current.coords.latitude)
            setUpdatingState(STATE_LOADING_DATA);
          },
          error => {
            console.log("–ö–æ–¥: –æ—à–∏–±–∫–∏ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ:", error.code, error.message)
            location.current = undefined;
          },
          { enableHighAccuracy: true, timeout: 15000, maximumAge: 10000 }
        );
      } else {
        setUpdatingState(STATE_DATA_ERROR);
      }
    });
  }

  async function fetchWithTimeout(resource: string, options: FetchOptions = {}) {
    const {timeout = 10000} = options; /* –≤—Ä–µ–º—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö 10 000–º—Å = 10 —Å–µ–∫—É–Ω–¥–∞–º */
    const controller = new AbortController();
    const id = setTimeout(() => controller.abort(), timeout);
    const response = await fetch(resource, {
      ...options, signal: controller.signal
    });
    clearTimeout(id);
    return response;
  }

  function loadingData(){
    if (!location.current || !location.current.coords){
      setUpdatingState(STATE_DATA_ERROR);
      return;
    }
    fetchWithTimeout(`https://api.openweathermap.org/data/2.5/weather?lat=${location.current?.coords.latitude}&lon=${location.current?.coords.longitude}&units=metric&lang=ru&APPID=df970160e8498542cb823c972d5a8b35`)
    .then((response) => {
      if (response.ok){
        response.json()
        .then(data=>{
          currTemp.current = data.main.temp;
          setFeelLike(data.main.feels_like);
          setMinTemp(data.main.temp_min);
          setMaxTemp(data.main.temp_max);
          setPressure(data.main.pressure);
          setHumidity(data.main.humidity);
          setSeaLevel(data.main.sea_level);
          setGroundLevel(data.main.grnd_level);
          setUpdatingState(STATE_DATA_LOADED);
        });
      }
    })
    .catch((error) => setUpdatingState(STATE_DATA_ERROR)
    );       
  }


  useEffect(() => {
    if (updatingDone === STATE_CALCULATE_LOCATION){
      getLocation();
    } else if (updatingDone === STATE_LOADING_DATA){
      loadingData();
    }
  }, [updatingDone]);

  function LoadingView(){
    return (
      <View style = {styles.awaitLoading}>
        <Text>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...</Text>
      </View>
    )
  }

  function calculateLocation(){
    return (
    <View style = {styles.awaitLoading}>
      <Text>–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—èüòÅ</Text>
    </View>
    )
  }

  function errorView(){
    return (
    <View style = {styles.container}>
      <View style = {styles.awaitLoading}>
      <Text style = {styles.errorTXT}>–û—à–∏–±–∫–∞...ü§î</Text>
      <Button onPress={() => setUpdatingState(STATE_CALCULATE_LOCATION)} title='–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞üîÉ'/>
      </View>
    </View>
    )
  }

  function LoadedView(){
      return (
      <View style = {styles.container}>
        <View style = {styles.infoScreen}>
        <Text style = {styles.textStyle}>–¢–µ–∫—É—â–∞—è —Ç–µ–º–ø.: {currTemp.current === undefined ? '–û—à–∏–±–∫–∞' : currTemp.current + '¬∞C'}</Text>
        <Text style = {styles.textStyle}>–ß—É–≤—Å—Ç–≤—É–µ—Ç—Å—è –∫–∞–∫: {feelsLike === undefined ? '–û—à–∏–±–∫–∞' : feelsLike + '¬∞C'}</Text>
        <Text style = {styles.textStyle}>–ú–∏–Ω —Ç–µ–º–ø.: {minTemp === undefined ? '–û—à–∏–±–∫–∞' : minTemp + '¬∞C'}</Text>
        <Text style = {styles.textStyle}>–ú–∞–∫—Å —Ç–µ–º–ø.: {maxTemp === undefined ? '–û—à–∏–±–∫–∞' : maxTemp + '¬∞C'}</Text>
        <Text style = {styles.textStyle}>–î–∞–≤–ª–µ–Ω–∏–µ: {pressure === undefined ? '–û—à–∏–±–∫–∞' : pressure + ' —Ä—Ç.—Å'}</Text>
        <Text style = {styles.textStyle}>–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity === undefined ? '–û—à–∏–±–∫–∞' : humidity + '%'}</Text>
        <Text style = {styles.textStyle}>–ù–∞ —É—Ä–æ–≤–Ω–µ –º–æ—Ä—è: {seaLevel === undefined ? '–û—à–∏–±–∫–∞' : seaLevel}</Text>
        <Text style = {styles.textStyle}>–ù–∞ —É—Ä–æ–≤–Ω–µ –∑–µ–º–ª–∏: {groundLevel === undefined ? '–û—à–∏–±–∫–∞' : groundLevel}</Text>
      </View>
        <View style = {styles.buttonStyle}>
          <Button onPress={() => {
            setUpdatingState(STATE_CALCULATE_LOCATION);
            currTemp.current = undefined;
          }}
          title='–û–±–Ω–æ–≤–∏—Ç—å'></Button>
        </View>
      </View>
    )
  };

  switch (updatingDone)
  {
    case STATE_CALCULATE_LOCATION:
      console.log('–°–æ—Å—Ç–æ—è–Ω–∏–µ: –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è');
      return calculateLocation();      
    case STATE_LOADING_DATA:
      console.log('–°–æ—Å—Ç–æ—è–Ω–∏–µ: –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö')
      return LoadingView();
    case STATE_DATA_LOADED:
      console.log('–°–æ—Å—Ç–æ—è–Ω–∏–µ: –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã')
      return LoadedView();
    case STATE_DATA_ERROR:
      console.log('–°–æ—Å—Ç–æ—è–Ω–∏–µ: –û—à–∏–±–∫–∞')
      return errorView();
    default:
        return <Text>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ</Text>
  }

}

export default App;

const styles = StyleSheet.create({

  container: {
    flex: 1,
    padding: 20,
    flexDirection: 'column'
  },

  awaitLoading: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },

  infoScreen: {
    flex: 10,
    justifyContent: 'center',
    alignItems: 'center',
  },

  btnView: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center'
  },

  buttonStyle: {
    flex: 1,
    justifyContent: 'flex-end',
  },

  textStyle: {
    fontSize: 20,
  },

  errorTXT: {
    color: 'red',
    fontSize: 16,
    textAlign: 'center',
    marginBottom: 20
  }

})